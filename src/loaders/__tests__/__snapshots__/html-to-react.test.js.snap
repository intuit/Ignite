// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`addActive 1`] = `
"<a className=!{
        '/foo' === props.currentPage ||
        props.currentPage.includes('#') && '/foo' === props.currentPage.split('#')[0] ||
        ('bar' === 'foo' && ('/' === props.currentPage ||
        '/index.html' === props.currentPage)) ||
        ('bar' === 'foo' && props.currentPage && (props.currentPage.includes('index.html') ||
        !props.currentPage.includes('.html'))) 
          ? 'is-active'
          : null
      !}
      href=\\"/foo\\">Foo</a>"
`;

exports[`addActiveAll 1`] = `
"
      <a className=!{
        '/' === props.currentPage ||
        props.currentPage.includes('#') && '/' === props.currentPage.split('#')[0] ||
        ('bar' === '' && ('/' === props.currentPage ||
        '/index.html' === props.currentPage)) ||
        ('bar' === '' && props.currentPage && (props.currentPage.includes('index.html') ||
        !props.currentPage.includes('.html'))) 
          ? 'is-active'
          : null
      !}
      href=\\"\\"></a>'
      <a className=!{
        '/foo' === props.currentPage ||
        props.currentPage.includes('#') && '/foo' === props.currentPage.split('#')[0] ||
        ('bar' === 'foo' && ('/' === props.currentPage ||
        '/index.html' === props.currentPage)) ||
        ('bar' === 'foo' && props.currentPage && (props.currentPage.includes('index.html') ||
        !props.currentPage.includes('.html'))) 
          ? 'is-active'
          : null
      !}
      href=\\"/foo\\">Foo</a>'
      <a className=!{
        '/bar' === props.currentPage ||
        props.currentPage.includes('#') && '/bar' === props.currentPage.split('#')[0] ||
        ('bar' === 'bar' && ('/' === props.currentPage ||
        '/index.html' === props.currentPage)) ||
        ('bar' === 'bar' && props.currentPage && (props.currentPage.includes('index.html') ||
        !props.currentPage.includes('.html'))) 
          ? 'is-active'
          : null
      !}
      href=\\"/bar\\">Foo</a>'
    "
`;

exports[`blogPost 1`] = `
"
    class blogPost extends React.Component {
      componentDidMount() {
        if (!this.props.atIndex) {
          window.configuration.setBlogHero('');
        }
      }

      render() {
        return  (
          <div className={makeClass('blogPost', this.props.className)}>
            <p>{this.props.heroUrl}</p>
            <section>
              {this.props.stub ? 
    <div className=\\"card\\">
      <div className=\\"card-content\\">
        <div className=\\"blogBody\\">
          
        <span className=\\"highlighted-line hero is-primary\\"/></div>
      </div>
    </div>    
   : 
    <div className=\\"card\\">
      <div className=\\"card-content\\">
        <div className=\\"blogBody\\">
          
        <div><span className=\\"highlighted-line hero is-primary\\"/></div></div>
      </div>
    </div>    
  }
            </section>
          </div>
        );
      }
    }

    export default blogPost;
  "
`;

exports[`codeTabs - generates a unique class for each 1`] = `
Object {
  "codeTabsComponent": "
      class CodeTabs0 extends React.Component {
        state = {
          tabIndex: 0
        }

        onClick = tabIndex => () => {
          this.setState({
            tabIndex
          })
        }

        render() {
          return (
            <div className=\\"codeTabs\\">
        <pre><br />          <code><br />            function foo () &#123;<br />              return 'foo';<br />            &#125;<br />          </code><br />        </pre>
      </div>
          )
        }
      }
    

      class CodeTabs1 extends React.Component {
        state = {
          tabIndex: 0
        }

        onClick = tabIndex => () => {
          this.setState({
            tabIndex
          })
        }

        render() {
          return (
            <div className=\\"codeTabs\\">
        <pre><br />          <code><br />            function bar () &#123;<br />              return 'bar';<br />            &#125;<br />          </code><br />        </pre>
      </div>
          )
        }
      }
    ",
  "source": "
      <CodeTabs0 />

      <CodeTabs1 />

      <div/>
    ",
}
`;

exports[`homePage not put everything in a hero 1`] = `
"
    const homePage = props => (
      <div>
        
      
      <div className='hero'>
        Another hero
      </div>
    
      </div>
    );

    export default homePage;
  "
`;

exports[`homePage put everything in a hero 1`] = `
"
    const homePage = props => (
      <div>
        <div className=\\"homePage\\"><div className=\\"hero\\">
        Some hero content
      </div>
      <div className=\\"hero\\">
        <div className=\\"hero-body\\">
          <div className=\\"columns\\">
            <div className=\\"home column content is-two-thirds-tablet is-three-quarters-desktop\\">
            <div>other</div><div>not hero</div></div>
          </div>
        </div>
      </div>
    <div className=\\"hero\\">
        Another hero
      </div></div>
      </div>
    );

    export default homePage;
  "
`;

exports[`index 1`] = `
"
    export default function index(props) {
      return (
        <aside className={makeClass('menu', props.className)} onClick={props.onClick}>
          <ul className=\\"menu-list\\"></ul>
        </aside>
      );
    }

    window.configuration.setFirstLink('/path', '/');
  "
`;

exports[`index 2`] = `
"
    export default function index(props) {
      return (
        <aside className={makeClass('menu', props.className)} onClick={props.onClick}>
          <p className=\\"menu-label\\"></p>
        </aside>
      );
    }

    window.configuration.setFirstLink('/path', '/');
  "
`;

exports[`initPage 1`] = `
Object {
  "pageStart": "
      import path from 'path';
      import React, { Component } from 'react';
      import makeClass from 'classnames';

      
  import PropTypes from 'prop-types';

  const getLocation = Location => ({
    href: Location.href,
    pathname: Location.pathname,
    hash: Location.hash,
    search: Location.search
  });

  const Link = props => {
    let {to, ...rest} = props;

    if (to.includes('http')) {
      return <a {...props} href={to} />
    }

    if (to[0] === '#') {
      to = path.join('/','/path/to/markdown.html') + to;
    }

    return (
      <a
        {...rest}
        href={to}
        onClick={e => {
          e.preventDefault();

          if (props.to === '#') {
            return false;
          }

          const location = new URL(path.join(window.location.origin, to))

          window.history.pushState(getLocation(location), null, to);
          props.onClick();

          const popStateEvent = new CustomEvent('changeLocation', { detail: location });
          dispatchEvent(popStateEvent);

          return false;
        }}
      />
    );
  };

  Link.defaultProps = {
    href: '',
    onClick: () => {}
  };

  Link.propTypes = {
    href: PropTypes.string,
    onClick: PropTypes.func
  }

      
  const PluginProvider = ({plugins, name, options, children, ...props}) => {
    let Plugin = plugins[name];
    const pluginOptions = Plugin.options;

    if (!Plugin) {
      return <div />;
    }

    Plugin = Plugin.component;
    return (
      <Plugin
        {...pluginOptions} 
        options={options ? options.options : {}}
        {...(options ? options.props : props)}
        children={children}
        plugins={plugins}
      />
    );
  };

      
  class Details extends Component {
    state = {
      open: this.props.open
    }

    render() {
      return (
        <details open={this.state.open}>
          {this.props.children}
        </details>
      )
    }
  };

      
      
    import IdealImage from 'react-ideal-image';

    const imageSources = {  };

    class LazyImageComponent extends React.Component {
      state = {
        image: null,
        ImageProvider: imageSources[this.props.src]
      }

      componentDidMount() {
        if (!this.state.image) {
          this.state.ImageProvider().then(c => {
            this.setState({
              image: c.default
            });
          });
        }
      }

      render() {
        let { image } = this.state;

        return image && typeof image === 'object' ? (
          <IdealImage
            {...this.props}
            className={makeClass('image', this.props.className)}
            src={image.src.src}
            width={image.src.width || image.width}
            height={image.src.height || image.height}
            placeholder={{ lqip: image.preSrc }}
            srcSet={image.src.images
              ? image.src.images.map(i => ({
                  ...i,
                  src: i.path
                }))
              : [{
                  src: image.src,
                  width: image.width
                }]
            }
          />
        ) : <img className={makeClass('image', this.props.className)} src={image} />;
      }
    }
  
      
  const lazyComponent = provider =>
    class extends React.Component {
      static defaultProps = {
        shouldLoad: true
      };
  
      state = {
        Comp: null
      };
  
      componentDidMount() {
        if (!this.state.Comp && this.props.shouldLoad) {
          provider().then(c => {
            this.setState({
              Comp: c.default
            });
          });
        }
      }
  
      render() {
        const { Comp } = this.state;
        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;
      }
    };


      const Gist = lazyComponent(() => import(/* webpackChunkName: \\"plugin-embed\\" */ 'react-gist'))
      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \\"plugin-embed\\" */ 'react-tweet-embed'))
    ",
  "source": "
    <div> some source </div>
  ",
}
`;

exports[`insertBreaks 1`] = `
"
    <div>
      <pre><br />        Line<br />        with<br />        breaks<br />      </pre>

      <pre><br />        Another<br />        Line<br />        with<br />        breaks<br />      </pre>
    </div>
  "
`;

exports[`loadImages 1`] = `
Array [
  "
      '/path/to/image.png': () => import(
        /* webpackChunkName: \\"image-image.png\\" */
        '/path/to/image.png'
      )
    ",
  "
      '/path/another/image.png': () => import(
        /* webpackChunkName: \\"image-image.png\\" */
        '/path/another/image.png'
      )
    ",
  "'http://pngimg.com/uploads/cat/cat_PNG50528.png': () => Promise.resolve({
              default: {
                src: { src: 'http://pngimg.com/uploads/cat/cat_PNG50528.png' },
                preSrc: 'http://pngimg.com/uploads/cat/cat_PNG50528.png',
                height: 1145,
                width: 1280
              }
            })",
  "'//pngimg.com/uploads/cat/cat_PNG50528.png': () => Promise.resolve({
              default: {
                src: { src: 'http://pngimg.com/uploads/cat/cat_PNG50528.png' },
                preSrc: 'http://pngimg.com/uploads/cat/cat_PNG50528.png',
                height: 1145,
                width: 1280
              }
            })",
]
`;

exports[`markDownPage 1`] = `
"
    const markDownPage = props => (
      <div className={props.className}>
        <section>
          <span className=\\"highlighted-line hero is-primary\\"></span>
        </section>
      </div>
    );

    export default markDownPage;
  "
`;

exports[`replaceIdLinks 1`] = `
"
    <Link currentPage={(this && this.props || props).currentPage} to=\\"#some-id\\">Link</Link>
    <Link currentPage={(this && this.props || props).currentPage} className=\\"fas fa-hashtag headerLink\\" to=\\"#some-other-id\\">Link</Link>
  "
`;

exports[`sanitizeJSX - back ticks 1`] = `"<div>  <pre>    formatter.hooks.resolve.tap(      'phone',      value =>        &#96;($&#123;value.substr(0, 3)&#125;) $&#123;value.substr(3, 3)&#125; - $&#123;value.substr(6, 4)&#125;&#96;    );  </pre></div>"`;

exports[`sanitizeJSX 1`] = `"<Link currentPage={(this && this.props || props).currentPage} className=\\"/foo\\">&#123;Foo&#125;</Link>"`;

exports[`sanitizeJSX 2`] = `"<Link currentPage={(this && this.props || props).currentPage} className={\\"/foo\\"}>Foo</Link>"`;

exports[`sanitizeJSX 3`] = `"<br/>"`;

exports[`sanitizeJSX 4`] = `"<PluginProvider>"`;

exports[`sanitizeJSX 5`] = `"<div className=\\"field\\" />"`;

exports[`sanitizeJSX 6`] = `"<label htmlFor=\\"field\\" />"`;

exports[`sanitizeJSX 7`] = `"<input type=\\"checkbox\\" readOnly className=\\"is-checkradio\\" />"`;

exports[`sanitizeJSX 8`] = `
"
      <pre><br />        content<br />      </pre>
    "
`;

exports[`sanitizeJSX- complex 1`] = `
"
    <Link currentPage={(this && this.props || props).currentPage} className=\\"fas fa-hashtag headerLink\\" to=\\"#zero-hassle-documentation\\" aria-hidden=\\"true\\" />
    <Link currentPage={(this && this.props || props).currentPage} to=\\"#/pages/GettingStarted.md\\">&#x1F389; Get Started</Link>
  "
`;
